<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:fc="http://www.adobe.com/2006/fc"
	layout="absolute" creationComplete="init()" viewSourceURL="srcview/index.html" 	  
	xmlns:ns1="*"
	 backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#000000, #FFFFFF]"
	  >

	<mx:Style source="MyTheme.css" /> 
	<fc:AutoComplete id="txtSearch"  labelField="name" x="314" y="57" width="285" 
		keyUp="{keyUp(event);}"
		  fontSize="14"  
		    typedTextChange="{tryLoadHint();}"/>
	<mx:ComboBox x="625" y="56" width="115" id="cbxSearchType"  textAlign="center" fontSize="14"/>
	<mx:Button x="748" y="56" label="搜索" id="btnSearch" click="{
			if (!cbxContinue.selected)
				items.empty();
   			this.toolPanel.hide();
   			rbox.resetRecommend();
   			rbox.clearControl();
   			search();
   			}" 
   		styleName="mainButton" fontSize="14"/>
		
	
	<fc:SpringGraph id="s" 
		lineColor="#333388" left="0" right="0" top="103" bottom="0"
		itemRenderer="RelationItemView" repulsionFactor="{rep.value}"
		edgeRenderer="{new EdgeRender()}" 
 		/>
		
	<ns1:ToolPanel x="-101" y="175" id="toolPanel"/>
	
	<mx:Script>
		<![CDATA[
		import mx.messaging.AbstractConsumer;
		import com.adobe.flex.extras.controls.springgraph.Item;
		import mx.core.UIComponent;
		import mx.effects.Fade;
		import mx.collections.ArrayCollection;
		import mx.controls.LinkButton;
		import com.adobe.flex.extras.controls.springgraph.Graph;	
		import com.adobe.serialization.json.JSON;  
		import mx.controls.Alert;
		import tipBubble.*;
		import mx.collections.*;
		import mx.managers.PopUpManager;
				
		[Bindable]
		public var scaleFactor: Number = 1.0;
		
		[Bindable]
		private var countPerPage:int = 5;
		
		
		
		private var nodeVisitor:NodeVisitor;
		
		public function get CountPerPage():int
		{
			return countPerPage;
		} 
		
		private var items: Graph;
		//private var serviceUrl:String = "http://localhost:49899/Relation.aspx";
		private var serviceUrl:String = "Relation.aspx";
		private var hideDelayTime:int = 5000;
		private var oldHintText:String = "";  
		private var defaultMaxWidh:int = 500;
		
		[Bindable]
		private var defaultNodeLimit:int = 30;
		
		[Bindable]
		private var defaultAutoLimit:int = 50;

		public var tipMan:BubbleTipManager = new BubbleTipManager();
		
		private var helpWindow:HelpWindow;
		
		[Bindable]
		private var keys:Array = null;
		
		//记录了当前有多少个加载项
		private var loadingCount:int = 0;
		
		private var funcArray:Array = [
			searchKey,
			loadStar,
			loadMovie
		];
		


		private function addItem(data:Object, linkTo: RelationItem,rank:int): RelationItem {
			var newItem: RelationItem = new RelationItem(data,rank);
			items.add(newItem);
			if(linkTo != null)
				items.link(newItem, linkTo);
			s.dataProvider = items;
			return newItem;
		}
		
		
		private function tryLoadHint():void
		{
			if (txtSearch.text.length!=0 &&
					(oldHintText.length == 0 || oldHintText.charAt(0) != txtSearch.text.charAt(0))
					)
				{	
					loadKeys();
					oldHintText = txtSearch.text;
				}
		}
		
		private function keyUp(event:KeyboardEvent):void
		{
			if (event.keyCode == 13)
			{
				if (!cbxContinue.selected)
					items.empty();
   				this.toolPanel.hide();
   				rbox.resetRecommend();
   				rbox.clearControl(); 
   			 	search();
			}
		}
		
		private function query(type:String,queryData:String,listener:Function):void
		{
			setLoadingCount(true);
			
			var request:URLRequest = new URLRequest(serviceUrl);
		    request.method = URLRequestMethod.POST;
		    var data:URLVariables = new URLVariables();
		    data.type = type;
		    data.query = queryData;
		    data.nodeCount = items.nodeCount;
		    data.start = 0;
		    data.count = this.countPerPage;
		    request.data = data;
		    var loader:URLLoader = new URLLoader();
		    loader.load(request);
		    loader.addEventListener(Event.COMPLETE,listener);
		    loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
		}
		
		
		public function queryPage(type:String,queryData:String,start:int,count:int):void
		{
			setLoadingCount(true);
			
			var request:URLRequest = new URLRequest(serviceUrl);
		    request.method = URLRequestMethod.POST;
		    var data:URLVariables = new URLVariables();
		    data.type = type;
		    data.query = queryData;
		    data.start = start;
		    data.count = count;
		    data.nodeCount = items.nodeCount;
		    request.data = data;
		    var loader:URLLoader = new URLLoader();
		    loader.load(request);
		    
		    loader.addEventListener(Event.COMPLETE,onSearchComplete);
		    loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
		    
		}
		
	   private function init():void
	   {
	   		items = new Graph();
   			helpWindow = PopUpManager.createPopUp(this,HelpWindow,false) as HelpWindow;
   			helpWindow.visible = false;
   			helpWindow.x = 0;
   			helpWindow.y = 154;
   			
   			pnlSetting.visible = false;
	   		var types:Array = ["关键字","明星","电影"]; 
			cbxSearchType.dataProvider = types;
			help.showTip("在输入框中输入关键字，如\"刘德华\"",false); 
					
					
			nodeVisitor = new NodeVisitor(items);
			
			var s:String = Application.application.parameters.query;  
			if (s!= null && s!="")  
				this.reSearch(s); 
			 
		    //this.reSearch("周华健");
	   }
	   
	   private function loadKeys():void
	   {
	   		this.query("loadKeys",txtSearch.text,onLoadKeyComplete);
	   }
	   
	   public function searchKey(key:String):void
	   {
	   		help.showTip("搜索 "+key+" 中...");
	   		this.query("queryByKey",key,onSearchComplete);
	   }
	   
	   public function loadStar(name:String,clearGraph:Boolean = false):void
	   {
	   		help.showTip("搜索明星 "+name+" 中...");
	   		if (clearGraph)
   				this.clearGraph(name,"STAR");
	   		this.query("queryStarByKeyword",name,onSearchComplete);
	   }
	   
	   public function loadStarById(id:String,name:String,clearGraph:Boolean):void
	   {
	   		help.showTip("搜索明星 "+name+" 中...");
	   		if (clearGraph)
   				this.clearGraph(name,"STAR");
   				
	   		this.query("queryStarById",id,onSearchComplete);
	   }
	   
	   public function loadMovieById(id:String,name:String,clearGraph:Boolean):void
	   {
	   		help.showTip("搜索电影 "+name+" 中...");
	   		if (clearGraph)
   				this.clearGraph(name,"MOVIE");
	   		this.query("queryMovieById",id,onSearchComplete);
	   }
	   
	   public function loadMovie(name:String,clearGraph:Boolean = false):void
	   {
	   		help.showTip("搜索电影 "+name+" 中...");
	   		if (clearGraph)
   				this.clearGraph(name,"MOVIE");
	   		this.query("queryMovieByKeyword",name,onSearchComplete);
	   }
	   
	   private function clearGraph(txt:String,type:String):void
	   {
	   		if(!cbxContinue.selected) 
   			{
   				items.empty();
   				
   			}
   			this.toolPanel.hide();
   			this.txtSearch.text = txt;
   			
   			switch(type)
			{
				case "STAR":
					this.cbxSearchType.selectedIndex = 1;
					break;
				case "MOVIE":
					this.cbxSearchType.selectedIndex = 2;
					break;
				case "KEYWORD":
				default:
					this.cbxSearchType.selectedIndex = 0;
					break;
			}
	   }
	   
	   public function removeOldPage(related:Array,item:RelationItem):void
	   {
	   		if(!cbxDelOldPage.selected)
	   		 	return;
   			var removedArray:Array;
   			//尝试删除旧的页
   			/*for(var i:int = 0;i<related.length;++i)
			{
				var relatedItem:RelationItem = items.find(related[i]) as RelationItem;
				removedArray = [relatedItem];
				if (relatedItem!= null && relatedItem.rank!=0)
				{
					//this.toolPanel.onItemRemove(relatedItem);
					//items.remove(relatedItem);
					relatedItem.canBeRemoved(items,item,removedArray);
					for(var j:int = 0;j<removedArray.length;++j)
					{
						this.toolPanel.onItemRemove(removedArray[j]);
						items.remove(removedArray[j]);
					}
					
				}
			}*/
			
			var removedItems:Object = nodeVisitor.visit(item);
			for(var id:String in removedItems)
					items.remove(removedItems[id]);
			
			//removedSoloItem();
	   }
	   
	   public function removedSoloItem(degree:int = 0):void
	   {
	   		var removedArray:Array = new Array();
	   		for(var id:String in items.nodes)
	   		{
	   			var item:RelationItem = items.find(id) as RelationItem;
	   			if (item!=null && item.rank!=0 && items.numLinks(item) <= degree)
	   				removedArray.push(item);
	   		}
	   		
	   		for(var i:int = 0;i<removedArray.length;++i)
	   			items.remove(removedArray[i]);
	   }
	   
	   public function showPageTip(item:RelationItem):void
	   {
   			var start:int = item.start;
			var len:int = (item.start + this.CountPerPage < item.TotalNum)? CountPerPage: item.TotalNum - item.start;
			for(var i:int=0;i<len;++i)
			{
				var id:String = item.getData(i+start).ID;
				var newItem:RelationItem = items.find(id) as RelationItem;
				if (newItem!=null)
					newItem.view.showPage(i+start);
			}	
	   }
	   
	   private function updateObject(data:Object,item:RelationItem,rank:int,start:int,level:int):void
	   {
	   		if (data == null)
	   			return;
	   		//更新数据，新查出来的数据比较全
	   		var isNewPage:Boolean =  (item.start != start);
	   		
	   		//不用有graph的，因为是删除旧的页使用的，而不是其他与其关联的
	   		var related:Array = item.getRelatedIds();
	   		item.updateData(data,rank,start);
	   		
	   		if (isNewPage)
	   		{
				removeOldPage(related,item);
	   		}
	   		
	   		//更新邻居节点
			visitRelated(data,item,rank,level);
			if (isNewPage)
			{
				showPageTip(item);	
			}
	   }
	   
	   public function autoDelete():void
	   {
	   		if (items.nodeCount> this.defaultAutoLimit)
	   		{
		   		this.removedSoloItem(1);
		   		this.removedSoloItem(1);
		   	}
	   }
	   
	   public function visitRelated(data:Object,newItem:RelationItem,rank:int,level:int):void
	   {
	   		
	   		var j:int;
			var tempItem:RelationItem = null;
			if (data.ObjectType == "MOVIE")
			{
		   		for(j=0;j<data.Stars.length;++j)
				{
					tempItem = items.find(data.Stars[j].Star.ID as String) as RelationItem;
					if (tempItem == null)
					{
						if (items.nodeCount < defaultNodeLimit || level < 1)
							addObject(data.Stars[j].Star,newItem,rank + j + 1,level+1);
					}
					else
						updateObject(data.Stars[j].Star,tempItem,rank + j + 1,tempItem.start,level+1);
				}
			}
			else
			{
				for(j=0;j<data.Movies.length;++j)
				{
					tempItem = items.find(data.Movies[j].Movie.ID as String) as RelationItem;
					if (tempItem == null)
					{
						if (items.nodeCount < defaultNodeLimit ||  level < 1)
							addObject(data.Movies[j].Movie,newItem,rank + j + 1,level+1);
					}
					else
						updateObject(data.Movies[j].Movie,tempItem,rank + j + 1,tempItem.start,level+1);
				}
			}
	   }
	   
	   private function addObject(data:Object,item:RelationItem,rank:int,level:int):void
	   {
	   		if(data == null)
	   			return; 
	   			
			var id: String = data.ID;
			var newItem:RelationItem = addItem(data, item,rank);
			visitRelated(data,newItem,rank,level);
			
	   }

	   private function errorHandler(e:IOErrorEvent):void
	   {
	   		setLoadingCount(false);	   			 
	   		help.showTip("获取结果失败");		  		
	   }
	   
	   	private function setLoadingCount(add:Boolean):void
	   	{
	   		if (add)
	   		{
	   			if (loadingCount == 0)
					this.cursorManager.setBusyCursor();
				loadingCount ++;
	   		}
	   		else
	   		{ 
	   			loadingCount --;
	   			if (loadingCount == 0)
	   				{
	   					this.cursorManager.removeBusyCursor();
	   					help.hideTip(hideDelayTime);
	   				}
	   		}
	   		
	   	}
	   		
		private function onLoadKeyComplete(event:Event):void
		{
			setLoadingCount(false);
			
			var loader:URLLoader = URLLoader(event.target);
			keys = (JSON.decode(loader.data) as Array);
			
			var oldText:String = txtSearch.text;
			txtSearch.dataProvider=keys;
			txtSearch.labelField = "Key";
			txtSearch.typedText = oldText;
			//help.showTip("加载关键字成功");
			
		}
		
		private function onSearchComplete(event:Event):void
		{
			setLoadingCount(false);

			
			var loader:URLLoader = URLLoader(event.target);
			var result:Object = (JSON.decode(loader.data) as Object);
			if (result!=null)
			{
				help.showTip("获得"+(result.ResultStar.length+result.ResultMovie.length)+"个结果");
				this.autoDelete();
				handleResult(result.ResultStar);
				handleResult(result.ResultMovie);
				if (!this.cbxContinue.selected)
					rbox.resetRecommend();
				rbox.createRecommend(result);
				
				//var totalLen:int = result.RelatedMovie.length + result.RelatedStar.length 
				//if (totalLen >0)
				var relatedLen:int = result.RelatedCount;
				if (relatedLen>0)
					this.help.showTip("；相关结果"+relatedLen+"个",true);
			}
			else
			{
				help.showTip("获取结果失败");
			}
		}
		
		private function handleResult(arr:Array):void
		{
			for(var i:int = 0;i<arr.length;++i)
			{
				var item:RelationItem = items.find(arr[i].ID) as RelationItem;
				if(item!=null)
				{
					updateObject(arr[i],item,0,item.nextStart,0);
				}
				else
				{
					addObject(arr[i],null,0,0);
				}
			}
		}
		
		private function search():void
		{
			if (txtSearch.text!="")
			{
				funcArray[this.cbxSearchType.selectedIndex](txtSearch.text);
				if(txtSearch.text.substr(0,1) == " ")
				{
					txtSearch.text = txtSearch.text.substr(1);
				}
			}
		}
		
		public function reSearch(key:String,type:String = "KEYWORD"):void
		{
			this.clearGraph(key,type);
			search();
		}
		
		
		
		
		
		public function removeItem(item:RelationItem):void
		{
			
			this.toolPanel.onItemRemove(item);
			//var related:Array = item.getRelatedIdsFromGraph(items);
			/*var related:Object = items.neighbors(item.id);
			var removedArray:Array;
   			for(var id:String in related)
			{
				var relatedItem:RelationItem = related[id] as RelationItem;
				removedArray = [relatedItem];
				if (relatedItem!= null && relatedItem.canBeRemoved(items,item,removedArray))
				{
					for(var j:int = 0;j<removedArray.length;++j)
					{
						items.remove(removedArray[j]);
					}
				}
			}
			this.items.remove(item);
			removedSoloItem();*/
			var removedItems:Object = nodeVisitor.visit(item);
			for(var id:String in removedItems)
				items.remove(removedItems[id]);
			this.items.remove(item);
		}
		
		public function setToolPanelPosition(x:int,y:int):void
		{
			toolPanel.x = x + s.x;
			toolPanel.y = y + s.y;
		}
		
		private function onScaleChanged():void
		{
			RelationGraph(Application.application).scaleFactor = hsScale.value; 
			s.refresh();
		}
		
		private function onDistanceChanged():void
		{
			s.refresh();
		}
		
		public function addToSearch(key:String):void
		{
			if (txtSearch.text!="" && txtSearch.text.substr(0,1) ==" ")
			{
				var arr:Array = txtSearch.text.split(' ');
				var found:Boolean = false;
				for(var i:int = 0;i<arr.length;++i)
					if (arr[i] == key)
						{ found = true;break;}
				
				if (found)
					return;
				
				txtSearch.text += " "+key;
			}
			else
				txtSearch.text = " "+key;			
		}
		

		]]>
	</mx:Script> 
	
	
	<ns1:TipButton x="314" y="87" width="285" id="help">
	</ns1:TipButton>
	<mx:Image x="10" y="38" source="@Embed('myimage/Logo.png')"/>
	<mx:HBox width="100%" height="30">
		<mx:Spacer width="100%"/>
		<mx:LinkButton label="清空搜索框" id="btnClearSearchText">
			<mx:click>{this.txtSearch.text="";}</mx:click>
		</mx:LinkButton>
		<mx:LinkButton label="清空图" id="btnClear">
			<mx:click>{items.empty();}</mx:click>
		</mx:LinkButton>
		<mx:LinkButton label="清空推荐" id="btnClearRecommend">
			<mx:click>{rbox.resetRecommend();rbox.clearControl();}</mx:click>
		</mx:LinkButton>
		<mx:LinkButton label="设置" id="btnSetting">
			<mx:click>{pnlSetting.visible = !pnlSetting.visible;}</mx:click>
		</mx:LinkButton>
		<mx:LinkButton label="帮助" id="btnHelp">
			<mx:click>{helpWindow.visible = !helpWindow.visible;}</mx:click>
		</mx:LinkButton>
	</mx:HBox>
	<mx:Panel width="440" height="225" layout="absolute" x="0" y="154" id="pnlSetting" title="显示设置" includeInLayout="{pnlSetting.visible}">
		<mx:HBox x="10" y="76" width="292" height="30">
			<mx:CheckBox label="翻页时删除节点" selected="true" id="cbxDelOldPage"/> 
			<mx:CheckBox label="自动删除节点" selected="true" id="cbxDelNode"/>
		</mx:HBox>
		<mx:Grid x="10" y="10">
			<mx:GridRow width="100%" height="100%">
				<mx:GridItem width="100%" height="100%">
					<mx:Label text="节点距离" styleName="text"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:HSlider id="rep" value="0.18" minimum="0.05" maximum="0.5" liveDragging="true" change="{onDistanceChanged();}" width="101" height="21"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:Label text="节点大小" styleName="text"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:HSlider id="hsScale" value="1.0" minimum="0.5" maximum="2" liveDragging="true" change="{onScaleChanged();}" width="101"/>
				</mx:GridItem>
			</mx:GridRow>
			<mx:GridRow width="100%" height="100%">
				<mx:GridItem width="100%" height="100%">
					<mx:Label text="显示节点上限" styleName="text"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:HSlider id="hsMaxNodeCount" minimum="10" maximum="100" liveDragging="true" width="101" change="{this.defaultNodeLimit = hsMaxNodeCount.value;}" value="{this.defaultNodeLimit}" snapInterval="1"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:Label text="自动删除节点" styleName="text"/>
				</mx:GridItem>
				<mx:GridItem width="100%" height="100%">
					<mx:HSlider id="hsAutoDelete" minimum="10" maximum="200" liveDragging="true" width="101" change="{this.defaultAutoLimit = hsAutoDelete.value;}" value="{this.defaultAutoLimit}" snapInterval="1"/>
				</mx:GridItem>
			</mx:GridRow>
		</mx:Grid>
		<mx:ControlBar height="54" y="92">
			<mx:Spacer width="100%"/>
			<mx:Button label="隐藏" width="87" click="{this.pnlSetting.visible = false;}"/>
		</mx:ControlBar>
	</mx:Panel>
	<mx:CheckBox x="862" y="58" label="继续搜索" id="cbxContinue" selected="true"/>
	<ns1:RecommendBox x="314" y="124" id="rbox" width="100%">
	</ns1:RecommendBox>
	<mx:Image y="29" source="@Embed('myimage/toSearch.png')" right="0"  buttonMode="true"
		click="{navigateToURL(new URLRequest('./Search.aspx'),'_self');}"
	 	
		 />
	
	
</mx:Application>
