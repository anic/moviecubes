<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:fc="http://www.adobe.com/2006/fc"
	layout="absolute" creationComplete="init()" viewSourceURL="srcview/index.html" 	  
	xmlns:ns1="*"
	 backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#000000, #FFFFFF]"
	  >

	<mx:Style source="MyTheme.css" /> 
	<fc:AutoComplete id="txtSearch"  labelField="name" x="248" y="57" width="285" 
		keyUp="{keyUp(event);}" typedTextChange="{tryLoadHint();}"
		  fontSize="14"/>
	<mx:ComboBox x="541" y="57" width="115" id="cbxSearchType"  textAlign="center" fontSize="14"/>
	<mx:Button x="664" y="57" label="搜索" id="btnSearch" click="{
			items.empty();
   			this.toolPanel.hide();
   			search();
   			}" 
   		styleName="mainButton" fontSize="14"/>
			
	
	<fc:SpringGraph id="s" 
		lineColor="#333388" left="0" right="0" top="161" bottom="0"
		itemRenderer="RelationItemView" repulsionFactor="{rep.value}"
		edgeRenderer="{new EdgeRender()}" 
 		>
	</fc:SpringGraph>
		
	<ns1:ToolPanel x="-101" y="175" id="toolPanel"/>
	<mx:Label x="248" y="122"  id="lblRecommend" styleName="text"/>
	
	<mx:Script>
		<![CDATA[
		import mx.messaging.AbstractConsumer;
		import com.adobe.flex.extras.controls.springgraph.Item;
		import mx.core.UIComponent;
		import mx.effects.Fade;
		import mx.collections.ArrayCollection;
		import mx.controls.LinkButton;
		import com.adobe.flex.extras.controls.springgraph.Graph;	
		import com.adobe.serialization.json.JSON;  
		import mx.controls.Alert;
		import tipBubble.*;
		import mx.collections.*;
		import mx.managers.PopUpManager;
				
		[Bindable]
		public var scaleFactor: Number = 1.0;
		
		[Bindable]
		private var countPerPage:int = 5;
		
		public function get CountPerPage():int
		{
			return countPerPage;
		} 
		
		private var items: Graph;
		private var serviceUrl:String = "http://localhost:49899/Relation.aspx";
		//private var serviceUrl:String = "/Relation.aspx";
		private var hideDelayTime:int = 5000;
		private var oldHintText:String = "";
		private var defaultMaxWidh:int = 500;
		
		[Bindable]
		private var defaultNodeLimit:int = 20;

		public var tipMan:BubbleTipManager = new BubbleTipManager();
		
		private var helpWindow:HelpWindow;
		
		[Bindable]
		private var keys:Array = null;
		
		//记录了当前有多少个加载项
		private var loadingCount:int = 0;
		
		private var funcArray:Array = [
			searchKey,
			loadStar,
			loadMovie
		];
		


		private function addItem(data:Object, linkTo: RelationItem,rank:int): RelationItem {
			var newItem: RelationItem = new RelationItem(data,rank);
			items.add(newItem);
			if(linkTo != null)
				items.link(newItem, linkTo);
			s.dataProvider = items;
			return newItem;
		}
		
		
		private function tryLoadHint():void
		{
			if (txtSearch.text.length!=0 &&
					(oldHintText.length == 0 || oldHintText.charAt(0) != txtSearch.text.charAt(0))
					)
				{	
					loadKeys();
					oldHintText = txtSearch.text;
				}
		}
		
		private function keyUp(event:KeyboardEvent):void
		{
			if (event.keyCode == 13)
			{
				items.empty();
   				this.toolPanel.hide();
   			 	search();
			}
		}
		
		private function query(type:String,queryData:String,listener:Function):void
		{
			setLoadingCount(true);
			
			var request:URLRequest = new URLRequest(serviceUrl);
		    request.method = URLRequestMethod.POST;
		    var data:URLVariables = new URLVariables();
		    data.type = type;
		    data.query = queryData;
		    data.nodeCount = items.nodeCount;
		    data.start = 0;
		    data.count = this.countPerPage;
		    request.data = data;
		    var loader:URLLoader = new URLLoader();
		    loader.load(request);
		    loader.addEventListener(Event.COMPLETE,listener);
		    loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
		}
		
		
		public function queryPage(type:String,queryData:String,start:int,count:int):void
		{
			setLoadingCount(true);
			
			var request:URLRequest = new URLRequest(serviceUrl);
		    request.method = URLRequestMethod.POST;
		    var data:URLVariables = new URLVariables();
		    data.type = type;
		    data.query = queryData;
		    data.start = start;
		    data.count = count;
		    data.nodeCount = items.nodeCount;
		    request.data = data;
		    var loader:URLLoader = new URLLoader();
		    loader.load(request);
		    
		    loader.addEventListener(Event.COMPLETE,onSearchComplete);
		    loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
		    
		}
		
	   private function init():void
	   {
	   		items = new Graph();
   			helpWindow = PopUpManager.createPopUp(this,HelpWindow,false) as HelpWindow;
   			helpWindow.visible = false;
   			helpWindow.x = 0;
   			helpWindow.y = 146;
	   		var types:Array = ["关键字","明星","电影"]; 
			cbxSearchType.dataProvider = types;
		    this.reSearch("周华健");
	   }
	   
	   private function loadKeys():void
	   {
	   		this.query("loadKeys",txtSearch.text,onLoadKeyComplete);
	   }
	   
	   public function searchKey(key:String):void
	   {
	   		help.showTip("加载 "+key+" 中...");
	   		this.query("queryByKey",key,onSearchComplete);
	   }
	   
	   public function loadStar(name:String,clearGraph:Boolean = false):void
	   {
	   		help.showTip("加载明星 "+name+" 中...");
	   		if (clearGraph)
   				this.clearGraph(name,"STAR");
	   		this.query("queryStarByKeyword",name,onSearchComplete);
	   }
	   
	   public function loadStarById(id:String,name:String,clearGraph:Boolean):void
	   {
	   		help.showTip("加载明星 "+name+" 中...");
	   		if (clearGraph)
   				this.clearGraph(name,"STAR");
   				
	   		this.query("queryStarById",id,onSearchComplete);
	   }
	   
	   public function loadMovieById(id:String,name:String,clearGraph:Boolean):void
	   {
	   		help.showTip("加载电影 "+name+" 中...");
	   		if (clearGraph)
   				this.clearGraph(name,"MOVIE");
	   		this.query("queryMovieById",id,onSearchComplete);
	   }
	   
	   public function loadMovie(name:String,clearGraph:Boolean = false):void
	   {
	   		help.showTip("加载电影 "+name+" 中...");
	   		if (clearGraph)
   				this.clearGraph(name,"MOVIE");
	   		this.query("queryMovieByKeyword",name,onSearchComplete);
	   }
	   
	   private function clearGraph(txt:String,type:String):void
	   {
	   		items.empty();
   			this.toolPanel.hide();
   			this.txtSearch.text = txt;
   			
   			switch(type)
			{
				case "STAR":
					this.cbxSearchType.selectedIndex = 1;
					break;
				case "MOVIE":
					this.cbxSearchType.selectedIndex = 2;
					break;
				case "KEYWORD":
				default:
					this.cbxSearchType.selectedIndex = 0;
					break;
			}
	   }
	   
	   public function removeOldPage(related:Array,item:RelationItem):void
	   {
   			var removedArray:Array;
   			//尝试删除旧的页
   			for(var i:int = 0;i<related.length;++i)
			{
				var relatedItem:RelationItem = items.find(related[i]) as RelationItem;
				removedArray = [relatedItem];
				if (relatedItem!= null && relatedItem.rank!=0)
				{
					this.toolPanel.onItemRemove(relatedItem);
					items.remove(relatedItem);
					/*relatedItem.canBeRemoved(items,item,removedArray);
					for(var j:int = 0;j<removedArray.length;++j)
					{
						this.toolPanel.onItemRemove(removedArray[j]);
						items.remove(removedArray[j]);
					}*/
					
				}
			}
			removedSoloItem();
	   }
	   
	   public function removedSoloItem():void
	   {
	   		var removedArray:Array = new Array();
	   		for(var id:String in items.nodes)
	   		{
	   			var item:RelationItem = items.find(id) as RelationItem;
	   			if (item!=null && item.rank!=0 && items.numLinks(item) == 0)
	   				removedArray.push(item);
	   		}
	   		
	   		for(var i:int = 0;i<removedArray.length;++i)
	   			items.remove(removedArray[i]);
	   }
	   
	   public function showPageTip(item:RelationItem):void
	   {
   			var start:int = item.start;
			var len:int = (item.start + this.CountPerPage < item.TotalNum)? CountPerPage: item.TotalNum - item.start;
			for(var i:int=0;i<len;++i)
			{
				var id:String = item.getData(i+start).ID;
				var newItem:RelationItem = items.find(id) as RelationItem;
				if (newItem!=null)
					newItem.view.showPage(i+start);
			}	
	   }
	   
	   private function updateObject(data:Object,item:RelationItem,rank:int,start:int,level:int):void
	   {
	   		if (data == null)
	   			return;
	   		//更新数据，新查出来的数据比较全
	   		var isNewPage:Boolean =  (item.start != start);
	   		
	   		//不用有graph的，因为是删除旧的页使用的，而不是其他与其关联的
	   		var related:Array = item.getRelatedIds();
	   		item.updateData(data,rank,start);
	   		
	   		if (isNewPage)
	   		{
				removeOldPage(related,item);
	   		}
	   		
	   		//更新邻居节点
			visitRelated(data,item,rank,level);
			if (isNewPage)
			{
				showPageTip(item);	
			}
	   }
	   
	   public function visitRelated(data:Object,newItem:RelationItem,rank:int,level:int):void
	   {
	   		if (items.nodeCount > defaultNodeLimit && level > 0)
	   			return; 
	   		
	   		var j:int;
			var tempItem:RelationItem = null;
			if (data.ObjectType == "MOVIE")
			{
		   		for(j=0;j<data.Stars.length;++j)
				{
					tempItem = items.find(data.Stars[j].Star.ID as String) as RelationItem;
					if (tempItem == null)
						addObject(data.Stars[j].Star,newItem,rank + j + 1,level+1);
					else
						updateObject(data.Stars[j].Star,tempItem,rank + j + 1,tempItem.start,level+1);
				}
			}
			else
			{
				for(j=0;j<data.Movies.length;++j)
				{
					tempItem = items.find(data.Movies[j].Movie.ID as String) as RelationItem;
					if (tempItem == null)
						addObject(data.Movies[j].Movie,newItem,rank + j + 1,level+1);
					else
						updateObject(data.Movies[j].Movie,tempItem,rank + j + 1,tempItem.start,level+1);
				}
			}
	   }
	   
	   private function addObject(data:Object,item:RelationItem,rank:int,level:int):void
	   {
	   		if(data == null)
	   			return; 
	   			
			var id: String = data.ID;
			var newItem:RelationItem = addItem(data, item,rank);
			visitRelated(data,newItem,rank,level);
			
	   }

	   private function errorHandler(e:IOErrorEvent):void
	   {
	   		setLoadingCount(false);	   			 
	   		help.showTip("操作失败");		  		
	   }
	   
	   	private function setLoadingCount(add:Boolean):void
	   	{
	   		if (add)
	   		{
	   			if (loadingCount == 0)
					this.cursorManager.setBusyCursor();
				loadingCount ++;
	   		}
	   		else
	   		{ 
	   			loadingCount --;
	   			if (loadingCount == 0)
	   				{
	   					this.cursorManager.removeBusyCursor();
	   					help.hideTip(hideDelayTime);
	   				}
	   		}
	   		
	   	}
	   		
		private function onLoadKeyComplete(event:Event):void
		{
			setLoadingCount(false);
			
			var loader:URLLoader = URLLoader(event.target);
			keys = (JSON.decode(loader.data) as Array);
			
			var oldText:String = txtSearch.typedText;
			txtSearch.dataProvider=keys;
			txtSearch.labelField = "Key";
			txtSearch.typedText = oldText;
			help.showTip("加载关键字成功");
			
		}
		
		private function onSearchComplete(event:Event):void
		{
			setLoadingCount(false);
			help.showTip("完成");
			resetRecommend();
			
			var loader:URLLoader = URLLoader(event.target);
			var result:Array = (JSON.decode(loader.data) as Array);
			if (result!=null && result.length > 0)
			{
				var item:RelationItem = items.find(result[0].ID) as RelationItem;
				if(item!=null)
				{
					updateObject(result[0],item,0,item.nextStart,0);
				}
				else
				{
					addObject(result[0],null,0,0);
					//help.showTip("第一个结果不对",true);
				}
						
				createRecommend(result);
			}
		}
		
		private function search():void
		{
			
			if (txtSearch.text!="")
			{
				funcArray[this.cbxSearchType.selectedIndex](txtSearch.text);
			}
		}
		
		public function reSearch(key:String,type:String = "KEYWORD"):void
		{
			this.clearGraph(key,type);
			search();
		}
		
		private function createRecommend(result:Object):void
		{
			if (result.length <= 1)
			{
				this.recommendBox.visible = false;
				this.lblRecommend.visible = false;
			}
			else
			{
				this.lblRecommend.text = "相关查找 共"+(result.length - 1)+"个";
				this.recommendBox.visible = true;
				this.lblRecommend.visible = true;
				
				var end:int = (result.length > 5)? 5:result.length -1;
				this.recommendList.visible = (result.length >7);
				var i:int;
				for(i = 1;i<=end;++i)
				{
					var btnRecommend:Button = new Button();
					if(result[i].ObjectType == "MOVIE")
						btnRecommend.styleName = "movieButton";
					else
						btnRecommend.styleName = "starButton";
						
					btnRecommend.label = result[i].Name;
					btnRecommend.data = result[i];
					btnRecommend.addEventListener(MouseEvent.CLICK,searchRecommend);
					this.recommendBox.addChildAt(btnRecommend,0);
				}
				
				if (this.recommendList.visible)
				{
					var dp:Array = new Array();
					for(i = 6;i<result.length;++i)
						dp.push(result[i].Name);
					recommendList.dataProvider = dp;
				}
				
			}
		}
		
		private function resetRecommend():void
		{
			var children:Array = this.recommendBox.getChildren();
			for(var i:int = 0;i<children.length;++i)
				if(children[i] != this.recommendList)
				{
					this.recommendBox.removeChild(children[i] as UIComponent);
				}
				
			this.lblRecommend.visible = false;
			this.recommendList.dataProvider = null;
			this.recommendList.visible = false;
			
		} 
		
		//查找推荐
		private function searchRecommend(event:MouseEvent):void
		{
			var aData:Object = (event.target as Button).data;
			//this.reSearch(aData.Name,aData.ObjectType);
			if (aData.ObjectType == "STAR")
				this.loadStarById(aData.ID,aData.Name,true);
			else
				this.loadMovieById(aData.ID,aData.Name,true);
		} 
		
		public function removeItem(item:RelationItem):void
		{
			
			this.toolPanel.onItemRemove(item);
			var related:Array = item.getRelatedIdsFromGraph(items);
			var removedArray:Array;
   			for(var i:int = 0;i<related.length;++i)
			{
				var relatedItem:RelationItem = items.find(related[i]) as RelationItem;
				removedArray = [relatedItem];
				if (relatedItem!= null && relatedItem.canBeRemoved(items,item,removedArray))
				{
					for(var j:int = 0;j<removedArray.length;++j)
					{
						items.remove(removedArray[j]);
					}
				}
			}
			this.items.remove(item);
			removedSoloItem();
		}
		
		public function setToolPanelPosition(x:int,y:int):void
		{
			toolPanel.x = x + s.x;
			toolPanel.y = y + s.y;
		}
		
		private function onScaleChanged():void
		{
			RelationGraph(Application.application).scaleFactor = hsScale.value; 
			s.refresh();
		}
		
		private function onDistanceChanged():void
		{
			s.refresh();
		}
		

		]]>
	</mx:Script> 
	
	<mx:HBox id="recommendBox" left="248" top="116"  visible="false">
		<mx:ComboBox id="recommendList"
			 change="{if (recommendList.dataProvider!=null) this.reSearch(recommendList.selectedLabel);}" 
			  includeInLayout="{this.recommendList.visible}" fontSize="12" height="36" textAlign="center"/>
	</mx:HBox>
	<ns1:TipButton x="248" y="87" width="285" id="help">
	</ns1:TipButton>
	<mx:Image x="11" y="18" source="@Embed('myimage/Logo.png')"/>
	<mx:HBox width="100%" height="30">
		<mx:Spacer width="100%"/>
		<mx:LinkButton label="设置" id="btnSetting">
			<mx:click>{pnlSetting.visible = !pnlSetting.visible;}</mx:click>
		</mx:LinkButton>
		<mx:LinkButton label="帮助" id="btnHelp">
			<mx:click>{helpWindow.visible = !helpWindow.visible;}</mx:click>
		</mx:LinkButton>
	</mx:HBox>
	<mx:Panel width="100%" height="129" layout="absolute" x="0" y="154" id="pnlSetting" title="显示设置" includeInLayout="{pnlSetting.visible}">
		<mx:HBox x="0" y="10" width="100%" height="30">
			<mx:Label text="节点距离" styleName="text"/>
			<mx:HSlider id="rep" value="0.18" minimum="0.05" maximum="0.5" liveDragging="true" change="{onDistanceChanged();}" width="101" height="21"/>
			<mx:Label text="节点大小" styleName="text"/>
			<mx:HSlider id="hsScale" value="1.0" minimum="0.05" maximum="1.2" liveDragging="true" change="{onScaleChanged();}" width="101"/>
			<mx:Label text="显示节点上限" styleName="text"/>
			<mx:HSlider id="hsMaxNodeCount" minimum="10" maximum="100" liveDragging="true" width="101" change="{this.defaultNodeLimit = hsMaxNodeCount.value;}" value="{this.defaultNodeLimit}" snapInterval="1"/>
			<mx:Button label="隐藏" width="87" click="{this.pnlSetting.visible = false;}"/>
		</mx:HBox>
	</mx:Panel>
	
</mx:Application>
