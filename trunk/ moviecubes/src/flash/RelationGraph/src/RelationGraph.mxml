<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:fc="http://www.adobe.com/2006/fc"
	layout="absolute" creationComplete="init()" viewSourceURL="srcview/index.html" 	  
	xmlns:ns1="*"
	 backgroundGradientAlphas="[1.0, 1.0]" backgroundGradientColors="[#000000, #FFFFFF]"
	  >

	<mx:Style source="MyTheme.css" /> 
	<fc:AutoComplete id="txtSearch"  labelField="name" x="123" y="57" width="285" 
		keyUp="{keyUp(event);}" typedTextChange="{tryLoadHint();}"
		  fontSize="14"/>
	<mx:ComboBox x="416" y="57" width="115" id="cbxSearchType"  textAlign="center" fontSize="14"/>
	<mx:Button x="539" y="57" label="搜索" id="btnSearch" click="{search();}" styleName="mainButton" fontSize="14"/>
	
			
	
	<fc:SpringGraph id="s" 
		lineColor="#333388" left="0" right="0" top="164" bottom="0"
		itemRenderer="RelationItemView" repulsionFactor="{rep.value}"
		edgeRenderer="{new EdgeRender()}" 
 		/>
		
	<ns1:ToolPanel x="19" y="34" id="toolPanel"/>
	
		
	
	
	<mx:Label x="123" y="122"  id="lblRecommend" styleName="text"/>
	<mx:Label x="10" y="44" text="Movie Cube" styleName="text" fontSize="15"/>
	
	<mx:Script>
		<![CDATA[
			import com.adobe.flex.extras.controls.springgraph.Item;
			import mx.core.UIComponent;
			import mx.effects.Fade;
		import mx.collections.ArrayCollection;
		import mx.controls.LinkButton;
		import com.adobe.flex.extras.controls.springgraph.Graph;	
		import com.adobe.serialization.json.JSON;  
		import mx.controls.Alert;
		import tipBubble.*;
				
		[Bindable]
		public var scaleFactor: Number = 1.0;
		
		private var items: Graph;
		private var serviceUrl:String = "http://localhost:49899/Relation.aspx";
		//private var serviceUrl:String = "/Relation.aspx";
		private var hideDelayTime:int = 5000;
		private var oldHintText:String = "";
		private var defaultMaxWidh:int = 500;

		public var tipMan:BubbleTipManager = new BubbleTipManager();
		 
		[Bindable]
		private var keys:Array = null;
		
		//记录了当前有多少个加载项
		private var loadingCount:int = 0;
		
		private var funcArray:Array = [
			searchKey,
			loadStar,
			loadMovie
		];
		

		private function addItem(data:Object, linkTo: RelationItem,rank:int): RelationItem {
			var newItem: RelationItem = new RelationItem(data,rank);
			items.add(newItem);
			if(linkTo != null)
				items.link(newItem, linkTo);
			s.dataProvider = items;
			return newItem;
		}
		
		
		private function tryLoadHint():void
		{
			if (txtSearch.text.length!=0 &&
					(oldHintText.length == 0 || oldHintText.charAt(0) != txtSearch.text.charAt(0))
					)
				{	
					loadKeys();
					oldHintText = txtSearch.text;
				}
		}
		
		private function keyUp(event:KeyboardEvent):void
		{
			if (event.keyCode == 13) 
				search();
		}
		
		private function query(type:String,queryData:String,listener:Function):void
		{
			setLoadingCount(true);
			
			var request:URLRequest = new URLRequest(serviceUrl);
		    request.method = URLRequestMethod.POST;
		    var data:URLVariables = new URLVariables();
		    data.type = type;
		    data.query = queryData;
		    request.data = data;
		    var loader:URLLoader = new URLLoader();
		    loader.load(request);
		    loader.addEventListener(Event.COMPLETE,listener);
		    loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
		}
		
	   private function init():void
	   {
	   		items = new Graph();
	   		
	   		var types:Array = ["关键字","明星","电影"]; 
			cbxSearchType.dataProvider = types;
		    this.reSearch("成龙");
	   }
	   
	   private function loadKeys():void
	   {
	   		this.query("loadKeys",txtSearch.text,onLoadKeyComplete);
	   }
	   
	   public function searchKey(key:String):void
	   {
	   		help.showTip("加载 "+key+" 中...");
	   		this.query("queryByKey",key,onSearchComplete);
	   }
	   
	   public function loadStar(name:String,clearGraph:Boolean = true):void
	   {
	   		help.showTip("加载明星 "+name+" 中...");
	   		if (clearGraph)
	   		{
	   			items.empty();
	   			this.toolPanel.hide();
	   			this.txtSearch.text = name;
	   			this.cbxSearchType.selectedIndex = 1;
	   		}
	   			
	   		this.query("queryStarByName",name,onSearchComplete);
	   }
	   
	   public function loadMovie(name:String,clearGraph:Boolean = true):void
	   {
	   		help.showTip("加载电影 "+name+" 中...");
	   		if (clearGraph)
   			{
   				items.empty();
   				this.toolPanel.hide();
   				this.txtSearch.text = name;
   				this.cbxSearchType.selectedIndex = 2;
   			}
	   		this.query("queryMovieByStar",name,onSearchComplete);
	   }
	   
	   private function addObject(data:Object,item:RelationItem,rank:int = 0):void
	   {
	   		if(data == null)
	   			return; 
	   			
			var id: String = data.ID;
			var newItem:RelationItem = items.find(id) as RelationItem;
			if (newItem == null)
				newItem = addItem(data, item,rank);
			else{
				//更新数据，新查出来的数据比较全
				newItem.updateData(data,rank);
				
				if (item!=null)
					items.link(newItem, item);
			}
			
			var j:int;
			if (data.ObjectType == "MOVIE")
			{
		   		for(j=0;j<data.Stars.length;++j)
				{
					addObject(data.Stars[j].Star,newItem,rank + j + 1);
				}
			}
			else
			{
				for(j=0;j<data.Movies.length;++j)
				{
					addObject(data.Movies[j].Movie,newItem,rank + j + 1);
				}
			}
	   }

	   private function errorHandler(e:IOErrorEvent):void
	   {
	   		setLoadingCount(false);	   			 
	   		help.showTip("操作失败");		  		
	   }
	   
	   	private function setLoadingCount(add:Boolean):void
	   	{
	   		if (add)
	   		{
	   			if (loadingCount == 0)
					this.cursorManager.setBusyCursor();
				loadingCount ++;
	   		}
	   		else
	   		{ 
	   			loadingCount --;
	   			if (loadingCount == 0)
	   				{
	   					this.cursorManager.removeBusyCursor();
	   					help.hideTip(hideDelayTime);
	   				}
	   		}
	   		
	   	}
	   		
		private function onLoadKeyComplete(event:Event):void
		{
			setLoadingCount(false);
			
			var loader:URLLoader = URLLoader(event.target);
			keys = (JSON.decode(loader.data) as Array);
			
			var oldText:String = txtSearch.typedText;
			txtSearch.dataProvider=keys;
			txtSearch.labelField = "Key";
			txtSearch.typedText = oldText;
			help.showTip("加载关键字成功");
			
		}
		
		private function onSearchComplete(event:Event):void
		{
			
			setLoadingCount(false);
			help.showTip("完成");
			resetRecommend();
			
			var loader:URLLoader = URLLoader(event.target);
			var result:Array = (JSON.decode(loader.data) as Array);
			if (result!=null && result.length > 0)
			{
				if(!items.hasNodes
				 || items.hasNode(result[0].ID))
				{
					addObject(result[0],null,0);
				}
				else
				{
					addObject(result[0],null,0);
					help.showTip("第一个结果不对",true);
				}
						
				createRecommend(result);
			}
		}
		
		public function search():void
		{
			items.empty();
			this.toolPanel.hide();
			if (txtSearch.text!="")
			{
				funcArray[this.cbxSearchType.selectedIndex](txtSearch.text);
			}
		}
		
		public function reSearch(key:String,type:String = "KEYWORD"):void
		{
			this.txtSearch.text = key;
			switch(type)
			{
				case "STAR":
					this.cbxSearchType.selectedIndex = 1;
					break;
				case "MOVIE":
					this.cbxSearchType.selectedIndex = 2;
					break;
				case "KEYWORD":
				default:
					this.cbxSearchType.selectedIndex = 0;
					break;
			}
			search();
		}
		
		private function createRecommend(result:Object):void
		{
			if (result.length <= 1)
			{
				this.recommendBox.visible = false;
				this.lblRecommend.visible = false;
			}
			else
			{
				this.lblRecommend.text = "相关查找 共"+(result.length - 1)+"个";
				this.recommendBox.visible = true;
				this.lblRecommend.visible = true;
				
				var end:int = (result.length > 5)? 5:result.length -1;
				this.recommendList.visible = (result.length >7);
				var i:int;
				for(i = 1;i<=end;++i)
				{
					var btnRecommend:Button = new Button();
					if(result[i].ObjectType == "MOVIE")
						btnRecommend.styleName = "movieButton";
					else
						btnRecommend.styleName = "starButton";
						
					btnRecommend.label = result[i].Name;
					btnRecommend.data = result[i];
					btnRecommend.addEventListener(MouseEvent.CLICK,searchRecommend);
					this.recommendBox.addChildAt(btnRecommend,0);
				}
				
				if (this.recommendList.visible)
				{
					var dp:Array = new Array();
					for(i = 6;i<result.length;++i)
						dp.push(result[i].Name);
					recommendList.dataProvider = dp;
				}
				
			}
		}
		
		private function resetRecommend():void
		{
			var children:Array = this.recommendBox.getChildren();
			for(var i:int = 0;i<children.length;++i)
				if(children[i] != this.recommendList)
				{
					this.recommendBox.removeChild(children[i] as UIComponent);
				}
				
			this.lblRecommend.visible = false;
			this.recommendList.dataProvider = null;
			this.recommendList.visible = false;
			
		} 
		
		//查找推荐
		private function searchRecommend(event:MouseEvent):void
		{
			var aData:Object = (event.target as Button).data;
			this.reSearch(aData.Name,aData.ObjectType);
		} 
		
		public function removeItem(item:RelationItem):void
		{
			this.toolPanel.onItemRemove(item);
			this.items.remove(item);
			var related:Array = item.getRelatedIds();
			for(var i:int = 0;i<related.length;++i)
			{
				var node:Item = items.find(related[i]);
				if (node!=null && items.numLinks(node)==0)
				{
					items.remove(node);
				}
			}
		}
		
		public function setToolPanelPosition(x:int,y:int):void
		{
			toolPanel.x = x + s.x;
			toolPanel.y = y + s.y;
		}

		]]>
	</mx:Script> 
	
	<mx:HBox id="recommendBox" left="248" top="116"  visible="false">
		<mx:ComboBox id="recommendList"
			 change="{if (recommendList.dataProvider!=null) this.reSearch(recommendList.selectedLabel);}" 
			  includeInLayout="{this.recommendList.visible}" fontSize="12" height="36" textAlign="center"/>
	</mx:HBox>
	<mx:HSlider id="rep" value="0.18" minimum="0.05" maximum="0.5" liveDragging="true" change="s.refresh();" width="101" height="21" x="481" y="87"/>
	<mx:HSlider x="653" y="87" value="1.0" minimum="0.05" maximum="1.2" liveDragging="true" change="RelationGraph(Application.application).scaleFactor = event.currentTarget.value; s.refresh();" width="101"/>
	<mx:Label x="588" y="87" text="节点大小" styleName="text"/>
	<mx:Label x="416" y="87" text="节点距离" styleName="text"/>
	<ns1:TipButton x="123" y="87" width="285" id="help">
	</ns1:TipButton>
	
</mx:Application>
